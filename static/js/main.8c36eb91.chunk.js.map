{"version":3,"sources":["Cell.js","Board.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","isMine","isOpen","isMarked","numOfMines","output","color","backgroundColor","className","style","Board","board","onClick","onContextMenu","height","length","width","getNeighbours","x","y","neighbours","i","j","push","numberOfMines","count","n","_open","cell","margin","map","row","event","preventDefault","App","useState","setHeight","setWidth","setMines","createGame","setBoard","change","setChange","mines","Set","size","Math","floor","random","add","onChange","target","value","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c36eb91.chunk.js","sourcesContent":["import './Cell.css';\r\n\r\n\r\nfunction Cell({ isMine, isOpen, isMarked, numOfMines }) {\r\n    let output = \"\";\r\n    if(isMarked) {\r\n        output = \"X\";\r\n    }\r\n    let className = \"cell\";\r\n    let color;\r\n    let backgroundColor;\r\n    if (isOpen) {\r\n        className = \"openCell\";\r\n        if(isMine && !isMarked) {\r\n            output = \"*\";\r\n            backgroundColor = \"red\";\r\n        }\r\n        else if (numOfMines > 0) {\r\n            output = numOfMines;\r\n            switch(numOfMines) {\r\n                case 1:\r\n                    color = \"blue\";\r\n                    break;\r\n                case 2:\r\n                    color = \"green\";\r\n                    break;\r\n                case 3:\r\n                    color = \"red\";\r\n                    break;\r\n                case 4:\r\n                    color = \"purple\";\r\n                    break;\r\n                case 5:\r\n                    color = \"brown\";\r\n                    break;\r\n                case 6:\r\n                    color = \"darkRed\";\r\n                    break;\r\n                case 7:\r\n                    color = \"dimGrey\";\r\n                    break;\r\n                case 8:\r\n                    color = \"black\";\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        \r\n        <div style={{color: color, backgroundColor: backgroundColor}} className={className}>{output}</div>\r\n    );\r\n}\r\n\r\nexport default Cell;","import Cell from \"./Cell\";\r\n\r\n\r\nfunction Board({ board, onClick, onContextMenu }) {\r\n\r\n    let height = board.length;\r\n    let width = board[0].length;\r\n\r\n\r\n    const getNeighbours = (x, y) => {\r\n        let neighbours = [];\r\n        for (let i = -1; i < 2; i++) {\r\n            for (let j = -1; j < 2; j++) {\r\n                if (i === 0 && j === 0) continue;\r\n                if (x + i >= 0 && x + i < height && y + j >= 0 && y + j < width) {\r\n                    neighbours.push([x + i, y + j]);\r\n                }\r\n            }\r\n        }\r\n        return neighbours;\r\n    }\r\n\r\n    const numberOfMines = (x, y) => {\r\n        let count = 0;\r\n        let neighbours = getNeighbours(x, y);\r\n        for (let n of neighbours) {\r\n            if (board[n[0]][n[1]].isMine) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    const _open = (x, y) => {\r\n        if (board[x][y].isMarked) return;\r\n        if (board[x][y].isMine) {\r\n            for (let i = 0; i < height; i++) {\r\n                for (let j = 0; j < width; j++) {\r\n                    let cell = board[i][j];\r\n                   if(!cell.isMarked || (cell.isMarked && !cell.isMine)) board[i][j].isOpen = true;\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        board[x][y].isOpen = true;\r\n        if (numberOfMines(x, y) === 0) {\r\n            let neighbours = getNeighbours(x, y);\r\n            for (let n of neighbours) {\r\n                if (!board[n[0]][n[1]].isOpen) {\r\n                    _open(n[0], n[1]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (<table style={{ margin: \"auto\" }}>\r\n        <tbody>\r\n            {board.map((row, i) => (\r\n                <tr key={i}>\r\n                    {row.map((cell, j) => (\r\n                        <td key={j} onClick={() => {\r\n                            onClick();\r\n                             _open(i, j);\r\n                            }\r\n                        } onContextMenu={(event) => {\r\n                            event.preventDefault();\r\n                           if(!cell.isOpen) cell.isMarked = !cell.isMarked;\r\n                            onContextMenu();\r\n                        }}><Cell isMine={cell.isMine} isOpen={cell.isOpen} isMarked={cell.isMarked} numOfMines={numberOfMines(i, j)} /></td>\r\n                    ))}\r\n                </tr>\r\n            ))}\r\n        </tbody>\r\n    </table>);\r\n}\r\n\r\nexport default Board;","import { useState } from \"react\";\nimport './App.css';\nimport Board from \"./Board\";\n\n\nfunction App() {\n\n  const [height, setHeight] = useState(20)\n  const [width, setWidth] = useState(30)\n  const [numOfMines, setMines] = useState(60)\n  const [board, setBoard] = useState(createGame(20, 30, 60));\n  const [change, setChange] = useState(false);\n\n\n\n\n  function createGame(height, width, numOfMines) {\n\n    if (height < 1) height = 1;\n    if (width < 1) width = 1;\n    if (numOfMines > height * width) numOfMines = height * width;\n\n    let board = []\n\n    for (let i = 0; i < height; i++) {\n      let row = []\n      for (let j = 0; j < width; j++) {\n        row.push({\n          isMine: false,\n          isOpen: false,\n          isMarked: false\n        });\n      }\n      board.push(row);\n    }\n    let mines = new Set();\n    while (mines.size < numOfMines) {\n      let x = Math.floor(Math.random() * height);\n      let y = Math.floor(Math.random() * width);\n      mines.add(x + '' + y);\n      board[x][y].isMine = true;\n    }\n    return board;\n  }\n\n  return (\n    <div className=\"App\" >\n      <span>Width </span><input onChange={(event) => setWidth(event.target.value)} type=\"number\" value={width} />\n      <span> height </span><input onChange={(event) => setHeight(event.target.value)} type=\"number\" value={height} />\n      <span> and number of mines </span><input onChange={(event) => setMines(event.target.value)} type=\"number\" value={numOfMines} />\n      <span>.  </span><button onClick={() => setBoard(createGame(height, width, numOfMines))}>New game</button>\n      <button onClick={() => {\n        setWidth(30);\n        setHeight(20);\n        setMines(60);\n        setBoard(createGame(20, 30, 60));\n      }\n      }>Reset</button>\n      <Board onClick={() => setChange(!change)} onContextMenu={(event) => {setChange(!change)}} board={board} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}